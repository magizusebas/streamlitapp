# -*- coding: utf-8 -*-
"""Copia de Copia de MiniChallenge2_W2D2_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M8O_RIvHrNSNooF4zusTJ72Id9ooFDKj

Mini Challenge - Part 2 - Week 2 - Day 2

#WEB APP
"""

!pip install -q streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import requests
# import pandas as pd
# from bs4 import BeautifulSoup
# import pandas as pd
# import plotly.graph_objects as go
# import plotly.express as px
# import seaborn as sns
# import matplotlib.pyplot as plt
# import numpy as np
# import streamlit as st
# 
# #IMPORT DATA SET
# 
# url = "https://www.mlb.com/stats/"
# response = requests.get(url)
# soup = BeautifulSoup(response.content, 'lxml')
# 
# # Find the specific table. Adjust the selector as needed based on table structure.
# table = soup.find("table")  # This finds the first table; you might need to specify further
# 
# # Convert HTML table to a pandas DataFrame
# df = pd.read_html(str(table))[0] if table else pd.DataFrame()
# 
# #CHANGE NAMES OF COLUMNS
# df = df.rename(columns={
#     'PLAYERPLAYER': 'PLAYER',
#     'TEAMTEAM': 'TEAM',
#     'GG':'G',
#     'ABAB':'AB',
#     'RR':'R',
#     'HH':'H',
#     '2B2B': '2B',
#     '3B3B': '3B',
#     'HRHR':'HR',
#     'RBIRBI':'RBI',
#     'BBBB':'BB',
#     'SOSO':'SO',
#     'SBSB':'SB',
#     'CSCS': 'CS',
#     'AVGAVG': 'AVG',
#     'OBPOBP':'OBP',
#     'SLGSLG':'SLG',
#         # Add more as needed
# })
# 
# st.title("Sports")
# st.subheader("Stats")
# st.write(df)
# st.text("In this dataframe we can see the last stats of the top hitters in the MLB")
# 
# # Create a selectbox for filtering
# selected_name = st.selectbox("Select a Team to view details:", df['TEAM'])
# 
# # Filter the DataFrame based on the selected name
# filtered_df = df[df['TEAM'] == selected_name]
# 
# # Display the filtered DataFrame
# st.write("Filtered DataFrame:")
# st.write(filtered_df)
# 
# #SLIDEEERRR
# 
# # Create a slider for selecting a range of AVG values
# min_ab, max_ab = st.slider("Select AB range:",
#                              min_value=int(df['AB'].min()),
#                              max_value=int(df['AB'].max()),
#                              value=(int(df['AB'].min()), int(df['AB'].max())))
# 
# # Filter the DataFrame based on the selected AVG range
# filtered_df = df[(df['AB'] >= min_ab) & (df['AB'] <= max_ab)]
# 
# # Display the filtered DataFrame
# st.write("Filtered DataFrame:")
# st.write(filtered_df)
# 
# #CHECKBOX
# 
# show_ab_true = st.checkbox("Show only rows where 'AB' is Higher than 600")
# 
# # Filter the DataFrame based on the checkbox selection
# if show_ab_true:
#     filtered_df = df[df['AB'] > 600]
# else:
#     filtered_df = df  # Show the entire DataFrame if unchecked
# 
# # Display the filtered DataFrame
# st.write("Filtered DataFrame:")
# st.write(filtered_df)

!npm install localtunnel

!streamlit run app.py &>logs.txt & npx localtunnel --port 8501